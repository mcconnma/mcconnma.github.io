<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Science, Technology, Innovation</title>
    <link>http://mcconnma.github.io/tags/test/</link>
    <description>Recent content in Test on Science, Technology, Innovation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Nov 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://mcconnma.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to blink a light in 10&#43; different programming languages</title>
      <link>http://mcconnma.github.io/posts/blinklight-10-languages/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://mcconnma.github.io/posts/blinklight-10-languages/</guid>
      <description>

&lt;h3 id=&#34;purpose:90794bf58092a6a1b29685accbdbb066&#34;&gt;Purpose&lt;/h3&gt;

&lt;p&gt;The purpose of this post is to demonstrate the diversity and availability of programming languages on &lt;strong&gt;embedded Linux platforms&lt;/strong&gt;, like the BeagleBone and Raspberry Pi.
It is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; meant to demonstrate how it would or could be done on platform X or platform Y, such as Arduino.
Additionally, it based on and assumed that the Linux kernel has included the &lt;a href=&#34;https://www.kernel.org/doc/Documentation/gpio/sysfs.txt&#34;&gt;GPIO Sysfs Interface for Userspace&lt;/a&gt;.
If you are not familiar with it, it maps the SoCs hardware to the Linux file system.
For example, on the BeagleBone, there are 4 &amp;lsquo;user&amp;rsquo; leds that are mapped to the file system as follows.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/sys/class/leds/beaglebone\:green\:usr[0-3]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;why-do-this:90794bf58092a6a1b29685accbdbb066&#34;&gt;Why do this?&lt;/h3&gt;

&lt;p&gt;The examples below are simple and basically open a file and write to it, however, I think it demonstrates two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There are serveral languages that are quite easily installed from the package manager of the Linux distribution running on the SoC.&lt;/li&gt;
&lt;li&gt;The blinking light is the hardware hacking equivalent of the ‘Hello World’ program in software. If you can blink a light programatically, you can extend that to reading sensors and controlling actuators.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use these examples as a starting point and extend them to your own projects. I am personally interested in the &amp;lsquo;Internet of Things&amp;rsquo; and/or Home Automation. A great book that I&amp;rsquo;ve read on the BeagleBone is by &lt;a href=&#34;http://www.amazon.com/gp/product/1118935128/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118935128&amp;amp;linkCode=as2&amp;amp;tag=mcconnxyz00-20&amp;amp;linkId=SGUGT7NOZK36PW5O&#34;&gt;Derek Molloy&lt;/a&gt;. I&amp;rsquo;ve also used the BeagleBone Black and RPi 2 for these examples:&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=mcconnxyz00-20&amp;marketplace=amazon&amp;region=US&amp;placement=B00CHYOLHK&amp;asins=B00CHYOLHK&amp;linkId=UIS4RGKPU2YEZW7P&amp;show_border=true&amp;link_opens_in_new_window=true&#34;&gt;
&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=mcconnxyz00-20&amp;marketplace=amazon&amp;region=US&amp;placement=B00T2U7R7I&amp;asins=B00T2U7R7I&amp;linkId=SD2NN3MVBGGS4KYL&amp;show_border=true&amp;link_opens_in_new_window=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;first-steps:90794bf58092a6a1b29685accbdbb066&#34;&gt;First Steps&lt;/h3&gt;

&lt;p&gt;I am making the following assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you already have a Linux version running on your platform&lt;/li&gt;
&lt;li&gt;a package manager is available to install software (the examples below use debian&amp;rsquo;s apt-get)&lt;/li&gt;
&lt;li&gt;you can connect into your platform, either through telnet or ssh&lt;/li&gt;
&lt;li&gt;you can compile and run the various examples based on the programming language (although I should add that as well to the examples)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes-about-the-examples:90794bf58092a6a1b29685accbdbb066&#34;&gt;Notes about the examples&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I am using the default provided user leds on BeagleBone which are mapped via GPIO Sysfs&lt;/li&gt;
&lt;li&gt;these are simple examples and wouldn&amp;rsquo;t be used in production and therefore best practices are not always applied (see Why do this?)&lt;/li&gt;
&lt;li&gt;all the examples work, they blink an led on a beaglebone&lt;/li&gt;
&lt;li&gt;the examples could be coded differently to demonstrate the same thing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-bash-shell:90794bf58092a6a1b29685accbdbb066&#34;&gt;(1) Bash Shell&lt;/h3&gt;

&lt;p&gt;The first language we’ll use is the ‘bash’ shell. It’s installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
STATE=0
while :
do
  STATE=$((STATE==0))
  echo $STATE &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/brightness
  sleep 2
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-perl:90794bf58092a6a1b29685accbdbb066&#34;&gt;(2) Perl&lt;/h3&gt;

&lt;p&gt;Perl is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
use warnings;
my $state = 1;
my $filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;;

while (1) {
  open LED , &amp;quot;&amp;gt;&amp;gt;$filename&amp;quot; or die &amp;quot;Error opening $filename: $!&amp;quot;;
  syswrite (LED, $state , 1);
  $state = 1 - $state;
  sleep 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-c:90794bf58092a6a1b29685accbdbb066&#34;&gt;(3) C&lt;/h3&gt;

&lt;p&gt;The C compiler (gcc) is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main() {

  FILE *fp = NULL;
  char *filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;;
  int state = 1;
  int retval = 0;

  if ((fp = fopen(filename, &amp;quot;w&amp;quot;)) == NULL) {
    printf(&amp;quot;failed to fopen led\n&amp;quot;);
    exit(-1);
  }

  for (;;) {
    if ((retval = fputc(&#39;0&#39; + state, fp)) == EOF) {
      printf(&amp;quot;failed to fputc led\n&amp;quot;);
      exit(-1);
    }
    fflush(fp);
    sleep (2);
    state = 1 - state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-c:90794bf58092a6a1b29685accbdbb066&#34;&gt;(4) C++&lt;/h3&gt;

&lt;p&gt;The C++ compiler (g++) isn’t installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install g++&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

using namespace std;

int main() {
  ofstream led;
  string filename(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;);
  int state = 1;

  led.open (filename.c_str(), ios::binary);
  if (led.is_open()) {
    while (true) {
      led &amp;lt;&amp;lt; state &amp;lt;&amp;lt; endl;
      sleep (2);
      state = 1 - state;
    }
  }
  else {
    cout &amp;lt;&amp;lt; &amp;quot;failed to open led&amp;quot; &amp;lt;&amp;lt; endl;
    exit(-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-python:90794bf58092a6a1b29685accbdbb066&#34;&gt;(5) Python&lt;/h3&gt;

&lt;p&gt;Python is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time

filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;
f = open(filename, &amp;quot;w&amp;quot;)
state = 1

while True:
  f.write(str(state))
  f.flush()
  time.sleep(2)
  state = 1 - state
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-ruby:90794bf58092a6a1b29685accbdbb066&#34;&gt;(6) Ruby&lt;/h3&gt;

&lt;p&gt;Ruby is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install ruby&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby

filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;
state = 1

begin
  file = File.open(filename, &amp;quot;w&amp;quot;)
  loop do
    file.write(state.to_s)
    file.flush
    sleep(2)
    state = 1 - state
  end
rescue IOError =&amp;gt; e
  puts &amp;quot;failed: #{e}&amp;quot;
ensure
  file.close unless file == nil
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-java:90794bf58092a6a1b29685accbdbb066&#34;&gt;(7) Java&lt;/h3&gt;

&lt;p&gt;Java is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install openjdk-7-jdk&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;

public class Blink {
  public static void main(String[] args) throws IOException, InterruptedException {
    int state = 1;
    Path path = Paths.get(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;);
    try(BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {
      while (true) {
        writer.write(&#39;0&#39; + state);
        writer.flush();
        Thread.sleep(2000);
        state = 1 - state;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-scala:90794bf58092a6a1b29685accbdbb066&#34;&gt;(8) Scala&lt;/h3&gt;

&lt;p&gt;Scala is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install scala&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.File
import java.io.FileWriter
import java.io.BufferedWriter

object Blink {
  def main(args: Array[String]) {
    var state = 1
    val file = new File(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;)
    val writer = new BufferedWriter(new FileWriter(file))
    while (true) {
      writer.write(&#39;0&#39; + state)
      writer.flush()
      Thread.sleep (2000)
      state = 1 - state;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-go:90794bf58092a6a1b29685accbdbb066&#34;&gt;(9) Go&lt;/h3&gt;

&lt;p&gt;Go is not installed by default&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install golang&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
  &amp;quot;log&amp;quot;
  &amp;quot;os&amp;quot;
  &amp;quot;strconv&amp;quot;
  &amp;quot;time&amp;quot;
)

func main() {
  f, err := os.OpenFile(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;, os.O_RDWR, 0666)
  if err != nil {
    log.Fatal(err)
  }
  defer f.Close()
  state := 1
  for {
    _, err = f.WriteString(strconv.Itoa(state))
    if err != nil {
      log.Fatal(err)
    }
    time.Sleep(2 * time.Second)
    state = 1 - state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-clojure:90794bf58092a6a1b29685accbdbb066&#34;&gt;(10) Clojure&lt;/h3&gt;

&lt;p&gt;Clojure is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install clojure1.4&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn blink []
  (with-open [fw (clojure.java.io/writer &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot; :append true)]
    (loop [state 1]
      (.write fw (Integer/toString state))
      (.flush fw)
      (Thread/sleep 2000)
      (recur (- 1 state)))))
(blink)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;11-pascal:90794bf58092a6a1b29685accbdbb066&#34;&gt;(11) Pascal&lt;/h3&gt;

&lt;p&gt;Pascal is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install fpc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{$IFDEF FPC}
  {$MODE DELPHI}
{$ENDIF}

Program Blink;

uses
  Sysutils;

const
  LED_FNAME = &#39;/sys/class/leds/beaglebone:green:usr0/brightness&#39;;

var
  Led: TextFile;
  State: Integer;

begin
  State:=1;
  try
    Assign(Led, LED_FNAME);
    Append(Led);
    While true do
    begin
      Writeln(Led, State);
      Flush(Led);
      Sleep(2000);
      State:=1-State;
    end;
  except
    on E: EInOutError do
      Writeln(&#39;failed: &#39;, E.Message);
  end;
  CloseFile(led);
end.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;12-nodejs:90794bf58092a6a1b29685accbdbb066&#34;&gt;(12) NodeJS&lt;/h3&gt;

&lt;p&gt;NodeJS is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var state = 1;
setInterval(blink, 2000);
function blink() {
  var fs = require(&amp;quot;fs&amp;quot;);
  fs.writeFile(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;, state, function (err) {
      if (err) throw err;
  });
  state = 1 - state;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;13-haskell:90794bf58092a6a1b29685accbdbb066&#34;&gt;(13) Haskell&lt;/h3&gt;

&lt;p&gt;Haskell (ghc) is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install ghc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;13-rust:90794bf58092a6a1b29685accbdbb066&#34;&gt;(13) Rust&lt;/h3&gt;

&lt;p&gt;Rust is not installed by default:&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>