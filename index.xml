<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Science, Technology, Innovation</title>
    <link>http://www.mcconn.xyz/</link>
    <description>Recent content on Science, Technology, Innovation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Sep 2015 14:28:11 -0400</lastBuildDate>
    <atom:link href="http://www.mcconn.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://www.mcconn.xyz/home/purpose/</link>
      <pubDate>Thu, 17 Sep 2015 14:28:11 -0400</pubDate>
      
      <guid>http://www.mcconn.xyz/home/purpose/</guid>
      <description>&lt;p&gt;The purpose of the following posts to write about and explore various technologies.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a combination of hardware and software projects.&lt;/p&gt;

&lt;p&gt;Primary interest is in home automation and the &amp;lsquo;Internet of Things&amp;rsquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://www.mcconn.xyz/about/</link>
      <pubDate>Thu, 17 Sep 2015 14:28:11 -0400</pubDate>
      
      <guid>http://www.mcconn.xyz/about/</guid>
      <description>

&lt;h1 id=&#34;purpose:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Purpose&lt;/h1&gt;

&lt;p&gt;The purpose of this website is to primary write about software/hardware projects, primarily in hack/home automation.
Additionally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;write/document projects&lt;/li&gt;
&lt;li&gt;advertise skills for hire&lt;/li&gt;
&lt;li&gt;keep abreast of web technologies: HTML, CSS, JavaScript, cloud/web hosting, security&lt;/li&gt;
&lt;li&gt;generate income (click away!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;technology:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Technology&lt;/h1&gt;

&lt;p&gt;The technology behind this website includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static website generator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; for HTML/CSS framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/ec2/&#34;&gt;Amazon EC2&lt;/a&gt; for cloud/server hosting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt; for CDN&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brackets.io/&#34;&gt;Brackets&lt;/a&gt; for software development&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;NGINX&lt;/a&gt; for web server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt; for domain name registration&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; for comments&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; for mathamatical formulae&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; for code highlighting&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/adsense/start/&#34;&gt;Google Adsense&lt;/a&gt; to maybe purchase a coffee for the day&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://affiliate-program.amazon.com/&#34;&gt;Amazaon Associates&lt;/a&gt; to maybe get a second coffee for the day&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://analytics.google.com&#34;&gt;Google Analytics&lt;/a&gt; to figure out if anybody is even reading this stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;contact:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Contact&lt;/h1&gt;

&lt;p&gt;If you want to send an email, send it &lt;a href=&#34;mailto: mcconnxyz@gmail.com&#34; target=&#34;_top&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Permutations and solutions of a childrens trainset</title>
      <link>http://www.mcconn.xyz/posts/trainset-p1/</link>
      <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.mcconn.xyz/posts/trainset-p1/</guid>
      <description>&lt;p&gt;The purpose of this post is to explore and discover the number of permutations of a childrens 16 piece train track set.&lt;br /&gt;
The &lt;a href=&#34;http://www.ikea.com/ca/en/catalog/products/30064359/&#34;&gt;trainset&lt;/a&gt; of interest is the following:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/lillabo-trainset.jpg&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This particular trainset has a total of 16 track piecies, 12 curved and 4 straight.
The curved pieces are reversible (the straight ones are not) and 2 of the 4 straight pieces form a bridge as in the picture.
I am interested in all solutions, for example those that use 10 or 12 pieces, not just all 16.
Additionally, I want to solve this programatically and to create a visual representation of the solutions.
A solution will be presented that uses Python to solve it programatically, along with a 2d graphics program called &lt;a href=&#34;http://cairographics.org/pycairo/&#34;&gt;Cairo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we need to determine if we are talking about &lt;a href=&#34;http://www.mathsisfun.com/combinatorics/combinations-permutations.html&#34;&gt;permutations or combinantions&lt;/a&gt;?
In the case of building a solution for a trainset, in which the order of the tracks does matter, we are talking about permutations &lt;em&gt;without repetitions&lt;/em&gt;.
In that case, the general formula for the number of permutations is the following:&lt;/p&gt;

&lt;p&gt;$$n!/(n-r)!$$&lt;/p&gt;

&lt;p&gt;Where n is the number of choices, in our case 16 for number of tracks, and r is how many are chosen from the set.  For example, the minimilist solution would be a circle, in which 8 pieces are used.  So, in order to find the one and only solution of 8 pieces, we would need to check the following number of permutations:&lt;/p&gt;

&lt;p&gt;$$16!/(8)! = 518,918,400$$&lt;/p&gt;

&lt;p&gt;That is a non-trivial number of permutations to verify that a solution is formed.  We would also need to check for solutions that have 9 pieces, 10 pieces, upto 16.  So the total number of potential solutions looks like:&lt;/p&gt;

&lt;p&gt;$$16!/8! + 16!/7! + 16!/6! + 16!/5! + 16!/4! + 16!/3! + 16!/2! + 16!/1! + 16!/0!$$&lt;/p&gt;

&lt;p&gt;It equates to:&lt;/p&gt;

&lt;p&gt;$$5.687397556Ã—10^{13}$$&lt;/p&gt;

&lt;p&gt;For a more detailed analysis of the problem, see this question on &lt;a href=&#34;http://cs.stackexchange.com/questions/40296/how-many-permutations-in-a-trainset&#34;&gt;stackexchange&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most programming languages have functions or libraries for generating permuations, such as for &lt;a href=&#34;https://docs.python.org/2/library/itertools.html&#34;&gt;Python&lt;/a&gt;.
However, using this approach did prove unpractical (runing on my old PC for example) due to the number of solutions that needed to be tested.
A solution that worked better was to use a a [K-ary tree or ternary tree][kary-tree] where K=3 and cr=&amp;lsquo;curve right&amp;rsquo;, cl=&amp;lsquo;curve left&amp;rsquo;, and s=&amp;lsquo;straight&amp;rsquo; and looks like the following:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/tree.png&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;In this approach, I could test the path to a particular node for given depths of tree 8-16.
This proved to be more practical as it removes duplicates from the permutations approach.
The formula for the total number of nodes in a perfect k-ary tree, with height h is:&lt;/p&gt;

&lt;p&gt;$$\left\lfloor\frac{k^{h+1} - 1}{k-1}\right\rfloor$$&lt;/p&gt;

&lt;p&gt;In this approach, we want to calculate the total number of nodes with a depth of 16 &lt;strong&gt;minus&lt;/strong&gt; the number of nodes with depth 8, which is the following:&lt;/p&gt;

&lt;p&gt;$$\left\lfloor\frac{3^{17} - 1}{2}\right\rfloor - \left\lfloor\frac{3^{7} - 1}{2}\right\rfloor$$&lt;/p&gt;

&lt;p&gt;$$=129,140,162.5 - 2186.5 = 129,137,976$$&lt;/p&gt;

&lt;p&gt;That is a more managelable number of solutions to calculate.
In programatic terms, the algorithm will build a 3-ary (ternary) tree and test the path to a leaf-node at a particular depth.
The code for this solution can be found on &lt;a href=&#34;https://github.com/mcconnma/trainset&#34;&gt;Github&lt;/a&gt;.
I use &lt;a href=&#34;https://wiki.python.org/moin/Generators&#34;&gt;Python generators&lt;/a&gt; which will &amp;lsquo;yield&amp;rsquo; a path at a depth. It requires no writing/storing paths to disk/memory (space efficient):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;
def add_children(path, depth):
  if (depth == 1):
    yield path + [&#39;cl&#39;]
    yield path + [&#39;s&#39;]
    yield path + [&#39;cr&#39;]
  else:
    for p in add_children(path + [&#39;cl&#39;], depth - 1): yield p
    for p in add_children(path + [&#39;s&#39;], depth - 1): yield p
    for p in add_children(path + [&#39;cr&#39;], depth - 1): yield p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and where:
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;
def build_tree(depth):
  r = []
  i = 0
  for path in add_children(r, depth):
    i = i+1
    if not valid(path):
      continue
    if duplicate(path):
      continue
    tb = TrackBuilder(str(path))
    if testpath(tb, path):
      solutions.append(path)
      imageid = str(depth) + &amp;lsquo;-&amp;rsquo; + str(i)
      tb.createImage(imageid)
      print(str(imageid) + &amp;lsquo;:&amp;rsquo; + str(path))
  print(&amp;ldquo;total checked: &amp;ldquo; + str(i))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Once a track path is generated, the following occurs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is tested to see if it is valid (does it have too many straight pieces for example?)&lt;/li&gt;
&lt;li&gt;it is a mirror image? (a circle consisting of 8 cr pieces is the same as 8 cl pieces)&lt;/li&gt;
&lt;li&gt;is it a rotation? (same path but different starting piece)&lt;/li&gt;
&lt;li&gt;it is built using &lt;a href=&#34;http://cairographics.org/pycairo/&#34;&gt;Cairo&lt;/a&gt; and tested to see if starting point = ending point and starting arc = ending arc&lt;/li&gt;
&lt;li&gt;if all those conditions pass, an image (png) is generated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running for depth 8 produced 1 solution, as expected:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 8
8-1:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;]
total checked: 6561
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and the solution looks like:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/8-1.png&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 9 produced 0 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 9
total checked: 19683
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 10 produced 1 solution:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 10
10-245:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
total checked: 59049
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and the solution looks like:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/10-245.png&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 11 produced 0 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 11
total checked: 177147
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 12 produced 2 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 12
12-1461:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
12-2921:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
total checked: 531441
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and here&amp;rsquo;s an animated gif showing all solutions for 12 pieces:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/12.gif&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 13 produced 0 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 13
total checked: 1594323
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 14 produced 9 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 14
14-10941:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-13857:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-15317:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
14-15321:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-24069:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-41573:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
14-63453:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-79059:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
14-120341:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
total checked: 4,782,969
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and here&amp;rsquo;s an animated gif showing all solutions for 14 pieces:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/14.gif&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 15 produced 0 solutions:
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 15
total checked: 14,348,907
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running for depth 16 produced 15 solutions:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ./main.py 16
16-32801:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
16-91869:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-100617:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-126861:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-144365:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
16-144377:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
16-144381:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-223113:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-239121:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-249357:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-301865:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
16-380597:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
16-717393:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-721821:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;]
16-1089293:[&amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cr&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;lsquo;cl&amp;rsquo;, &amp;rsquo;s&amp;rsquo;, &amp;rsquo;s&amp;rsquo;]
$ total checked: 43,046,721
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and here&amp;rsquo;s an animated gif showing all solutions for 16 pieces:
&lt;div style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;http://www.mcconn.xyz/trainset/16.gif&#34; alt=&#34;&#34; /&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only 1 solution includes a path &lt;em&gt;under the bridge&lt;/em&gt; (&lt;strong&gt;16-32801&lt;/strong&gt;).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;total solutions = 1(@8) + 0(@9) + 1(@10) + 0(@11) + 4(@12) + 0(@13) + 9(@14) + 0(@15) + 15(@16) = &lt;strong&gt;30&lt;/strong&gt; solutions&lt;/li&gt;
&lt;li&gt;personal favorite (&lt;strong&gt;16-717393&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few things that could be done for this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not a concurrent solution (only 1 CPU process runs at a time). Calculating solutions for depths of 8-12 ran in under a minute or two &amp;hellip; a depth of 16 took an hour (old PC).&lt;/li&gt;
&lt;li&gt;This program finds &amp;lsquo;perfect&amp;rsquo; solutions where start point = end point. There is a lot of &amp;lsquo;give&amp;rsquo; in the tracks. Several workable solutions exist by bending the tracks to &amp;lsquo;fit&amp;rsquo;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading. Send me a pull request on &lt;a href=&#34;https://github.com/mcconnma/trainset&#34;&gt;Github&lt;/a&gt; if you think you have a contribution.&lt;/p&gt;

&lt;p&gt;[kary-tree]: &lt;a href=&#34;https://en.wikipedia.org/wiki/K-ary_tree&#34;&gt;https://en.wikipedia.org/wiki/K-ary_tree&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to blink a light in 10&#43; different programming languages</title>
      <link>http://www.mcconn.xyz/posts/blinklight-10-languages/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.mcconn.xyz/posts/blinklight-10-languages/</guid>
      <description>

&lt;h3 id=&#34;purpose:90794bf58092a6a1b29685accbdbb066&#34;&gt;Purpose&lt;/h3&gt;

&lt;p&gt;The purpose of this post is to demonstrate the diversity and availability of programming languages on &lt;strong&gt;embedded Linux platforms&lt;/strong&gt;, like the BeagleBone and Raspberry Pi.
It is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; meant to demonstrate how it would or could be done on platform X or platform Y, such as Arduino.
Additionally, it based on and assumed that the Linux kernel has included the &lt;a href=&#34;https://www.kernel.org/doc/Documentation/gpio/sysfs.txt&#34;&gt;GPIO Sysfs Interface for Userspace&lt;/a&gt;.
If you are not familiar with it, it maps the SoCs hardware to the Linux file system.
For example, on the BeagleBone, there are 4 &amp;lsquo;user&amp;rsquo; leds that are mapped to the file system as follows.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/sys/class/leds/beaglebone\:green\:usr[0-3]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;why-do-this:90794bf58092a6a1b29685accbdbb066&#34;&gt;Why do this?&lt;/h3&gt;

&lt;p&gt;The examples below are simple and basically open a file and write to it, however, I think it demonstrates two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There are serveral languages that are quite easily installed from the package manager of the Linux distribution running on the SoC.&lt;/li&gt;
&lt;li&gt;The blinking light is the hardware hacking equivalent of the â€˜Hello Worldâ€™ program in software. If you can blink a light programatically, you can extend that to reading sensors and controlling actuators.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use these examples as a starting point and extend them to your own projects. I am personally interested in the &amp;lsquo;Internet of Things&amp;rsquo; and/or Home Automation. A great book that I&amp;rsquo;ve read on the BeagleBone is by &lt;a href=&#34;http://www.amazon.com/gp/product/1118935128/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1118935128&amp;amp;linkCode=as2&amp;amp;tag=mcconnxyz00-20&amp;amp;linkId=SGUGT7NOZK36PW5O&#34;&gt;Derek Molloy&lt;/a&gt;. I&amp;rsquo;ve also used the BeagleBone Black and RPi 2 for these examples:&lt;/p&gt;

&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=mcconnxyz00-20&amp;marketplace=amazon&amp;region=US&amp;placement=B00CHYOLHK&amp;asins=B00CHYOLHK&amp;linkId=UIS4RGKPU2YEZW7P&amp;show_border=true&amp;link_opens_in_new_window=true&#34;&gt;
&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=mcconnxyz00-20&amp;marketplace=amazon&amp;region=US&amp;placement=B00T2U7R7I&amp;asins=B00T2U7R7I&amp;linkId=SD2NN3MVBGGS4KYL&amp;show_border=true&amp;link_opens_in_new_window=true&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;first-steps:90794bf58092a6a1b29685accbdbb066&#34;&gt;First Steps&lt;/h3&gt;

&lt;p&gt;I am making the following assumptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you already have a Linux version running on your platform&lt;/li&gt;
&lt;li&gt;a package manager is available to install software (the examples below use debian&amp;rsquo;s apt-get)&lt;/li&gt;
&lt;li&gt;you can connect into your platform, either through telnet or ssh&lt;/li&gt;
&lt;li&gt;you can compile and run the various examples based on the programming language (although I should add that as well to the examples)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;notes-about-the-examples:90794bf58092a6a1b29685accbdbb066&#34;&gt;Notes about the examples&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I am using the default provided user leds on BeagleBone which are mapped via GPIO Sysfs&lt;/li&gt;
&lt;li&gt;these are simple examples and wouldn&amp;rsquo;t be used in production and therefore best practices are not always applied (see Why do this?)&lt;/li&gt;
&lt;li&gt;all the examples work, they blink an led on a beaglebone&lt;/li&gt;
&lt;li&gt;the examples could be coded differently to demonstrate the same thing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-bash-shell:90794bf58092a6a1b29685accbdbb066&#34;&gt;(1) Bash Shell&lt;/h3&gt;

&lt;p&gt;The first language weâ€™ll use is the â€˜bashâ€™ shell. Itâ€™s installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
STATE=0
while :
do
  STATE=$((STATE==0))
  echo $STATE &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/brightness
  sleep 2
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-perl:90794bf58092a6a1b29685accbdbb066&#34;&gt;(2) Perl&lt;/h3&gt;

&lt;p&gt;Perl is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
use warnings;
my $state = 1;
my $filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;;

while (1) {
  open LED , &amp;quot;&amp;gt;&amp;gt;$filename&amp;quot; or die &amp;quot;Error opening $filename: $!&amp;quot;;
  syswrite (LED, $state , 1);
  $state = 1 - $state;
  sleep 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-c:90794bf58092a6a1b29685accbdbb066&#34;&gt;(3) C&lt;/h3&gt;

&lt;p&gt;The C compiler (gcc) is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main() {

  FILE *fp = NULL;
  char *filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;;
  int state = 1;
  int retval = 0;

  if ((fp = fopen(filename, &amp;quot;w&amp;quot;)) == NULL) {
    printf(&amp;quot;failed to fopen led\n&amp;quot;);
    exit(-1);
  }

  for (;;) {
    if ((retval = fputc(&#39;0&#39; + state, fp)) == EOF) {
      printf(&amp;quot;failed to fputc led\n&amp;quot;);
      exit(-1);
    }
    fflush(fp);
    sleep (2);
    state = 1 - state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-c:90794bf58092a6a1b29685accbdbb066&#34;&gt;(4) C++&lt;/h3&gt;

&lt;p&gt;The C++ compiler (g++) isnâ€™t installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install g++&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

using namespace std;

int main() {
  ofstream led;
  string filename(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;);
  int state = 1;

  led.open (filename.c_str(), ios::binary);
  if (led.is_open()) {
    while (true) {
      led &amp;lt;&amp;lt; state &amp;lt;&amp;lt; endl;
      sleep (2);
      state = 1 - state;
    }
  }
  else {
    cout &amp;lt;&amp;lt; &amp;quot;failed to open led&amp;quot; &amp;lt;&amp;lt; endl;
    exit(-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-python:90794bf58092a6a1b29685accbdbb066&#34;&gt;(5) Python&lt;/h3&gt;

&lt;p&gt;Python is installed by default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import time

filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;
f = open(filename, &amp;quot;w&amp;quot;)
state = 1

while True:
  f.write(str(state))
  f.flush()
  time.sleep(2)
  state = 1 - state
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-ruby:90794bf58092a6a1b29685accbdbb066&#34;&gt;(6) Ruby&lt;/h3&gt;

&lt;p&gt;Ruby is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install ruby&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby

filename = &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;
state = 1

begin
  file = File.open(filename, &amp;quot;w&amp;quot;)
  loop do
    file.write(state.to_s)
    file.flush
    sleep(2)
    state = 1 - state
  end
rescue IOError =&amp;gt; e
  puts &amp;quot;failed: #{e}&amp;quot;
ensure
  file.close unless file == nil
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-java:90794bf58092a6a1b29685accbdbb066&#34;&gt;(7) Java&lt;/h3&gt;

&lt;p&gt;Java is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install openjdk-7-jdk&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;

public class Blink {
  public static void main(String[] args) throws IOException, InterruptedException {
    int state = 1;
    Path path = Paths.get(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;);
    try(BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {
      while (true) {
        writer.write(&#39;0&#39; + state);
        writer.flush();
        Thread.sleep(2000);
        state = 1 - state;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;8-scala:90794bf58092a6a1b29685accbdbb066&#34;&gt;(8) Scala&lt;/h3&gt;

&lt;p&gt;Scala is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install scala&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.File
import java.io.FileWriter
import java.io.BufferedWriter

object Blink {
  def main(args: Array[String]) {
    var state = 1
    val file = new File(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;)
    val writer = new BufferedWriter(new FileWriter(file))
    while (true) {
      writer.write(&#39;0&#39; + state)
      writer.flush()
      Thread.sleep (2000)
      state = 1 - state;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;9-go:90794bf58092a6a1b29685accbdbb066&#34;&gt;(9) Go&lt;/h3&gt;

&lt;p&gt;Go is not installed by default&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install golang&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
  &amp;quot;log&amp;quot;
  &amp;quot;os&amp;quot;
  &amp;quot;strconv&amp;quot;
  &amp;quot;time&amp;quot;
)

func main() {
  f, err := os.OpenFile(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;, os.O_RDWR, 0666)
  if err != nil {
    log.Fatal(err)
  }
  defer f.Close()
  state := 1
  for {
    _, err = f.WriteString(strconv.Itoa(state))
    if err != nil {
      log.Fatal(err)
    }
    time.Sleep(2 * time.Second)
    state = 1 - state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10-clojure:90794bf58092a6a1b29685accbdbb066&#34;&gt;(10) Clojure&lt;/h3&gt;

&lt;p&gt;Clojure is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install clojure1.4&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn blink []
  (with-open [fw (clojure.java.io/writer &amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot; :append true)]
    (loop [state 1]
      (.write fw (Integer/toString state))
      (.flush fw)
      (Thread/sleep 2000)
      (recur (- 1 state)))))
(blink)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;11-pascal:90794bf58092a6a1b29685accbdbb066&#34;&gt;(11) Pascal&lt;/h3&gt;

&lt;p&gt;Pascal is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install fpc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{$IFDEF FPC}
  {$MODE DELPHI}
{$ENDIF}

Program Blink;

uses
  Sysutils;

const
  LED_FNAME = &#39;/sys/class/leds/beaglebone:green:usr0/brightness&#39;;

var
  Led: TextFile;
  State: Integer;

begin
  State:=1;
  try
    Assign(Led, LED_FNAME);
    Append(Led);
    While true do
    begin
      Writeln(Led, State);
      Flush(Led);
      Sleep(2000);
      State:=1-State;
    end;
  except
    on E: EInOutError do
      Writeln(&#39;failed: &#39;, E.Message);
  end;
  CloseFile(led);
end.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;12-nodejs:90794bf58092a6a1b29685accbdbb066&#34;&gt;(12) NodeJS&lt;/h3&gt;

&lt;p&gt;NodeJS is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var state = 1;
setInterval(blink, 2000);
function blink() {
  var fs = require(&amp;quot;fs&amp;quot;);
  fs.writeFile(&amp;quot;/sys/class/leds/beaglebone:green:usr0/brightness&amp;quot;, state, function (err) {
      if (err) throw err;
  });
  state = 1 - state;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;13-haskell:90794bf58092a6a1b29685accbdbb066&#34;&gt;(13) Haskell&lt;/h3&gt;

&lt;p&gt;Haskell (ghc) is not installed by default:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# sudo apt-get install ghc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;13-rust:90794bf58092a6a1b29685accbdbb066&#34;&gt;(13) Rust&lt;/h3&gt;

&lt;p&gt;Rust is not installed by default:&lt;/p&gt;

&lt;p&gt;TODO&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>